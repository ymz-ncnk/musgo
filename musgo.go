package musgo

import (
	"errors"
	"io/ioutil"
	"os"
	"reflect"

	"github.com/ymz-ncnk/musgo/parser"

	"github.com/ymz-ncnk/musgen"
	"golang.org/x/tools/imports"
)

// This package tests code which is generated by the github.com/ymz-ncnk/musgen
// module. Those tests are in 'musgen_..._test.go' files. By default they are
// commented. If you want to run them:
// 1. Uncomment
// 2. Run '$ go generate'

// Also this package checks correctnes of the github.com/ymz-ncnk/musgo/parser
// package with musgen testdata. Those tests are in 'parse_..._test.go' files.

var ErrNotAliasType = errors.New("not alias type")

func New() (MusGo, error) {
	musGen, err := musgen.New()
	if err != nil {
		return MusGo{}, err
	}
	return MusGo{musGen: musGen}, nil
}

type MusGo struct {
	musGen musgen.MusGen
}

// Generate generates MarshalMUS, UnmarshalMUS, and SizeMUS methods for the
// specified type. Generated file with 'name of the type'.musgen.go name is
// placed to the current directory.
// If type is an alias to a pointer type returns error.
func (musGo MusGo) Generate(t reflect.Type, unsafe bool) error {
	return musGo.GenerateAs(t, unsafe, "", "")
}

// Same as Generate. Generated file is placed into the specified path with the
// specified name.
func (musGo MusGo) GenerateAs(t reflect.Type, unsafe bool, path,
	name string) error {
	td, err := parser.Parse(t)
	td.Unsafe = unsafe
	if err != nil {
		return err
	}
	return musGo.generate(td, path, name)
}

// Same as Generate. Use it if you want provide validation for an alias type.
func (musGo MusGo) GenerateAlias(t reflect.Type, unsafe bool, validator string,
	maxLength int, elemValidator, keyValidator string) error {
	return musGo.GenerateAliasAs(t, unsafe, validator, maxLength, elemValidator,
		keyValidator, "", "")
}

// Same as GenerateAlias. Generated file is placed into the specified path with
// the specified name.
func (musGo MusGo) GenerateAliasAs(t reflect.Type, unsafe bool, validator string,
	maxLength int, elemValidator, keyValidator, path, name string) error {
	td, err := parser.Parse(t)
	if err != nil {
		return err
	}
	if !musgen.Alias(td) {
		return ErrNotAliasType
	}
	td.Unsafe = unsafe
	// alias type description has one field
	td.Fields[0].Validator = validator
	td.Fields[0].MaxLength = maxLength
	td.Fields[0].ElemValidator = elemValidator
	td.Fields[0].KeyValidator = keyValidator
	return musGo.generate(td, path, name)
}

func (musGo MusGo) generate(td musgen.TypeDesc, path, name string) error {
	musGen, err := musgen.New()
	if err != nil {
		return err
	}
	var bs []byte
	bs, err = musGen.Generate(td, musgen.GoLang)
	if err != nil {
		return err
	}
	bs, err = imports.Process("", bs, nil)
	if err != nil {
		return err
	}
	if name == "" {
		name = makeDefaultName(td)
	}
	if path == "" {
		path = "."
	}
	return ioutil.WriteFile(path+"/"+name, bs, os.ModePerm)
}

func makeDefaultName(td musgen.TypeDesc) string {
	return td.Name + ".musgen.go"
}
