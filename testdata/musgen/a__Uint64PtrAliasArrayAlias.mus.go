// Code generated by musgen. DO NOT EDIT.

package musgen

import "github.com/ymz-ncnk/musgo/errs"

// Marshal fills buf with the MUS encoding of v.
func (v Uint64PtrAliasArrayAlias) Marshal(buf []byte) int {
	i := 0
	{
		for _, item := range v {
			if item == nil {
				buf[i] = 0
				i++
			} else {
				buf[i] = 1
				i++
				{
					si := (*item).Marshal(buf[i:])
					i += si
				}
			}
		}
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *Uint64PtrAliasArrayAlias) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		for j := 0; j < 3; j++ {
			(*v)[j] = new(Uint64Alias)
			if buf[i] == 0 {
				i++
				(*v)[j] = nil
			} else if buf[i] != 1 {
				i++
				return i, errs.ErrWrongByte
			} else {
				i++
				{
					var sv Uint64Alias
					si := 0
					si, err = sv.Unmarshal(buf[i:])
					if err == nil {
						(*(*v)[j]) = sv
						i += si
					}
				}
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v Uint64PtrAliasArrayAlias) Size() int {
	size := 0
	{
		for _, item := range v {
			size++
			if item != nil {
				{
					ss := (*item).Size()
					size += ss
				}
			}
		}
	}
	return size
}
