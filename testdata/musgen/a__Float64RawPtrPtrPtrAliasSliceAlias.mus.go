// Code generated by musgen. DO NOT EDIT.

package musgen

import (
	"math"

	"github.com/ymz-ncnk/muserrs"
)

// Marshal fills buf with the MUS encoding of v.
func (v Float64RawPtrPtrPtrAliasSliceAlias) Marshal(buf []byte) int {
	i := 0
	{
		length := len(v)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for _, el := range v {
			if el == nil {
				buf[i] = 0
				i++
			} else {
				buf[i] = 1
				i++
				{
					uv := math.Float64bits(float64((***el)))
					{
						buf[i] = byte(uv)
						i++
						buf[i] = byte(uv >> 8)
						i++
						buf[i] = byte(uv >> 16)
						i++
						buf[i] = byte(uv >> 24)
						i++
						buf[i] = byte(uv >> 32)
						i++
						buf[i] = byte(uv >> 40)
						i++
						buf[i] = byte(uv >> 48)
						i++
						buf[i] = byte(uv >> 56)
						i++
					}
				}
			}
		}
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *Float64RawPtrPtrPtrAliasSliceAlias) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, muserrs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, muserrs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, muserrs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, muserrs.ErrNegativeLength
		}
		(*v) = make([]***float64, length)
		for j := 0; j < length; j++ {
			{
				tmp0 := new(float64)
				tmp1 := &tmp0
				(*v)[j] = &tmp1
			}
			if buf[i] == 0 {
				i++
				(*v)[j] = nil
			} else if buf[i] != 1 {
				i++
				return i, muserrs.ErrWrongByte
			} else {
				i++
				{
					var uv uint64
					{
						if len(buf) < 8 {
							return i, muserrs.ErrSmallBuf
						}
						uv = uint64(buf[i])
						i++
						uv |= uint64(buf[i]) << 8
						i++
						uv |= uint64(buf[i]) << 16
						i++
						uv |= uint64(buf[i]) << 24
						i++
						uv |= uint64(buf[i]) << 32
						i++
						uv |= uint64(buf[i]) << 40
						i++
						uv |= uint64(buf[i]) << 48
						i++
						uv |= uint64(buf[i]) << 56
						i++
					}
					(***(*v)[j]) = float64(math.Float64frombits(uv))
				}
			}
			if err != nil {
				err = muserrs.NewSliceError(j, err)
				break
			}
		}
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v Float64RawPtrPtrPtrAliasSliceAlias) Size() int {
	size := 0
	{
		length := len(v)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for _, el := range v {
			size++
			if el != nil {
				{
					{
						_ = (***el)
						size += 8
					}
				}
			}
		}
	}
	return size
}
