// Code generated by musgen. DO NOT EDIT.

package musgen

import (
	"math"

	"github.com/ymz-ncnk/musgo/errs"
)

// Marshal fills buf with the MUS encoding of v.
func (v FloatByteBoolMapMapAlias) Marshal(buf []byte) int {
	i := 0
	{
		length := len(v)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range v {
			{
				uv := math.Float32bits(float32(ke))
				uv = (uv << 16) | (uv >> 16)
				uv = ((uv << 8) & 0xFF00FF00) | ((uv >> 8) & 0x00FF00FF)
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
			{
				length := len(vl)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				for ke, vl := range vl {
					{
						buf[i] = byte(ke)
						i++
					}
					{
						if vl {
							buf[i] = 0x01
						} else {
							buf[i] = 0x00
						}
						i++
					}
				}
			}
		}
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *FloatByteBoolMapMapAlias) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		(*v) = make(map[float32]map[byte]bool)
		for ; length > 0; length-- {
			var kem float32
			var vlm map[byte]bool
			{
				var uv uint32
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 4 && b > 15 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint32(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint32(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				uv = (uv << 16) | (uv >> 16)
				uv = ((uv << 8) & 0xFF00FF00) | ((uv >> 8) & 0x00FF00FF)
				kem = float32(math.Float32frombits(uv))
			}
			if err != nil {
				err = errs.NewMapKeyError(kem, err)
				break
			}
			{
				var length int
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					length = int(uv)
				}
				if length < 0 {
					return i, errs.ErrNegativeLength
				}
				vlm = make(map[byte]bool)
				for ; length > 0; length-- {
					var kemm byte
					var vlmm bool
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						kemm = byte(buf[i])
						i++
					}
					if err != nil {
						err = errs.NewMapKeyError(kemm, err)
						break
					}
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						if buf[i] == 0x01 {
							vlmm = true
							i++
						} else if buf[i] == 0x00 {
							vlmm = false
							i++
						} else {
							err = errs.ErrWrongByte
						}
					}
					if err != nil {
						err = errs.NewMapValueError(kemm, vlmm, err)
						break
					}
					(vlm)[kemm] = vlmm
				}
			}
			if err != nil {
				err = errs.NewMapValueError(kem, vlm, err)
				break
			}
			(*v)[kem] = vlm
		}
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v FloatByteBoolMapMapAlias) Size() int {
	size := 0
	{
		length := len(v)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range v {
			{
				uv := math.Float32bits(float32(ke))
				uv = (uv << 16) | (uv >> 16)
				uv = ((uv << 8) & 0xFF00FF00) | ((uv >> 8) & 0x00FF00FF)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
			{
				length := len(vl)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				for ke, vl := range vl {
					{
						_ = ke
						size++
					}
					{
						_ = vl
						size++
					}
				}
			}
		}
	}
	return size
}
