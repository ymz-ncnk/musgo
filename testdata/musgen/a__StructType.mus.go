// Code generated by musgen. DO NOT EDIT.

package musgen

import "github.com/ymz-ncnk/musgo/errs"

// Marshal fills buf with the MUS encoding of v.
func (v StructType) Marshal(buf []byte) int {
	i := 0
	{
		for v.Uint >= 0x80 {
			buf[i] = byte(v.Uint) | 0x80
			v.Uint >>= 7
			i++
		}
		buf[i] = byte(v.Uint)
		i++
	}
	{
		for v.Uint16 >= 0x80 {
			buf[i] = byte(v.Uint16) | 0x80
			v.Uint16 >>= 7
			i++
		}
		buf[i] = byte(v.Uint16)
		i++
	}
	{
		for v.Uint32 >= 0x80 {
			buf[i] = byte(v.Uint32) | 0x80
			v.Uint32 >>= 7
			i++
		}
		buf[i] = byte(v.Uint32)
		i++
	}
	{
		for v.Uint64 >= 0x80 {
			buf[i] = byte(v.Uint64) | 0x80
			v.Uint64 >>= 7
			i++
		}
		buf[i] = byte(v.Uint64)
		i++
	}
	{
		tmp := (*v.UintPtr)
		for tmp >= 0x80 {
			buf[i] = byte(tmp) | 0x80
			tmp >>= 7
			i++
		}
		buf[i] = byte(tmp)
		i++
	}
	{
		tmp := (***v.UintPtrPtrPtr)
		for tmp >= 0x80 {
			buf[i] = byte(tmp) | 0x80
			tmp >>= 7
			i++
		}
		buf[i] = byte(tmp)
		i++
	}
	{
		uv := uint64(v.Int)
		if v.Int < 0 {
			uv = ^(uv << 1)
		} else {
			uv = uv << 1
		}
		{
			for uv >= 0x80 {
				buf[i] = byte(uv) | 0x80
				uv >>= 7
				i++
			}
			buf[i] = byte(uv)
			i++
		}
	}
	{
		buf[i] = byte(v.Int8)
		i++
	}
	{
		uv := uint16(v.Int16)
		if v.Int16 < 0 {
			uv = ^(uv << 1)
		} else {
			uv = uv << 1
		}
		{
			for uv >= 0x80 {
				buf[i] = byte(uv) | 0x80
				uv >>= 7
				i++
			}
			buf[i] = byte(uv)
			i++
		}
	}
	{
		uv := uint32(v.Int32)
		if v.Int32 < 0 {
			uv = ^(uv << 1)
		} else {
			uv = uv << 1
		}
		{
			for uv >= 0x80 {
				buf[i] = byte(uv) | 0x80
				uv >>= 7
				i++
			}
			buf[i] = byte(uv)
			i++
		}
	}
	{
		uv := uint64(v.Int64)
		if v.Int64 < 0 {
			uv = ^(uv << 1)
		} else {
			uv = uv << 1
		}
		{
			for uv >= 0x80 {
				buf[i] = byte(uv) | 0x80
				uv >>= 7
				i++
			}
			buf[i] = byte(uv)
			i++
		}
	}
	{
		uv := uint64((*v.IntPtr))
		if (*v.IntPtr) < 0 {
			uv = ^(uv << 1)
		} else {
			uv = uv << 1
		}
		{
			for uv >= 0x80 {
				buf[i] = byte(uv) | 0x80
				uv >>= 7
				i++
			}
			buf[i] = byte(uv)
			i++
		}
	}
	{
		uv := uint64((***v.IntPtrPtrPtr))
		if (***v.IntPtrPtrPtr) < 0 {
			uv = ^(uv << 1)
		} else {
			uv = uv << 1
		}
		{
			for uv >= 0x80 {
				buf[i] = byte(uv) | 0x80
				uv >>= 7
				i++
			}
			buf[i] = byte(uv)
			i++
		}
	}
	{
		length := len(v.String)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		if len(buf[i:]) < length {
			panic(errs.ErrSmallBuf)
		}
		i += copy(buf[i:], v.String)
	}
	{
		length := len((*v.StringPtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		if len(buf[i:]) < length {
			panic(errs.ErrSmallBuf)
		}
		i += copy(buf[i:], (*v.StringPtr))
	}
	{
		length := len((***v.StringPtrPtrPtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		if len(buf[i:]) < length {
			panic(errs.ErrSmallBuf)
		}
		i += copy(buf[i:], (***v.StringPtrPtrPtr))
	}
	{
		buf[i] = byte(v.Byte)
		i++
	}
	{
		buf[i] = byte((*v.BytePtr))
		i++
	}
	{
		buf[i] = byte((***v.BytePtrPtrPtr))
		i++
	}
	{
		if v.Bool {
			buf[i] = 0x01
		} else {
			buf[i] = 0x00
		}
		i++
	}
	{
		if *v.BoolPtr {
			buf[i] = 0x01
		} else {
			buf[i] = 0x00
		}
		i++
	}
	{
		if ***v.BoolPtrPtrPtr {
			buf[i] = 0x01
		} else {
			buf[i] = 0x00
		}
		i++
	}
	{
		length := len(v.Slice)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for _, el := range v.Slice {
			{
				for el >= 0x80 {
					buf[i] = byte(el) | 0x80
					el >>= 7
					i++
				}
				buf[i] = byte(el)
				i++
			}
		}
	}
	{
		length := len((*v.SlicePtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for _, el := range *v.SlicePtr {
			{
				for el >= 0x80 {
					buf[i] = byte(el) | 0x80
					el >>= 7
					i++
				}
				buf[i] = byte(el)
				i++
			}
		}
	}
	{
		length := len((***v.SlicePtrPtrPtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for _, el := range ***v.SlicePtrPtrPtr {
			{
				for el >= 0x80 {
					buf[i] = byte(el) | 0x80
					el >>= 7
					i++
				}
				buf[i] = byte(el)
				i++
			}
		}
	}
	{
		for _, item := range v.Array {
			{
				uv := uint64(item)
				if item < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		for _, item := range *v.ArrayPtr {
			{
				uv := uint32(item)
				if item < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		for _, item := range ***v.ArrayPtrPtrPtr {
			{
				uv := uint32(item)
				if item < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		length := len(v.Map)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range v.Map {
			{
				length := len(ke)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				if len(buf[i:]) < length {
					panic(errs.ErrSmallBuf)
				}
				i += copy(buf[i:], ke)
			}
			{
				uv := uint64(vl)
				if vl < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		length := len((*v.MapPtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range *v.MapPtr {
			{
				length := len(ke)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				if len(buf[i:]) < length {
					panic(errs.ErrSmallBuf)
				}
				i += copy(buf[i:], ke)
			}
			{
				uv := uint64(vl)
				if vl < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		length := len((***v.MapPtrPtrPtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range ***v.MapPtrPtrPtr {
			{
				length := len(ke)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				if len(buf[i:]) < length {
					panic(errs.ErrSmallBuf)
				}
				i += copy(buf[i:], ke)
			}
			{
				uv := uint64(vl)
				if vl < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		si := v.Struct.Marshal(buf[i:])
		i += si
	}
	{
		si := (*v.StructPtr).Marshal(buf[i:])
		i += si
	}
	{
		si := (***v.StructPtrPtrPtr).Marshal(buf[i:])
		i += si
	}
	{
		for _, item := range v.Tricky {
			{
				length := len(item)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				for ke, vl := range item {
					{
						for _, item := range ke {
							{
								si := item.Marshal(buf[i:])
								i += si
							}
						}
					}
					{
						length := len(vl)
						{
							uv := uint64(length)
							if length < 0 {
								uv = ^(uv << 1)
							} else {
								uv = uv << 1
							}
							{
								for uv >= 0x80 {
									buf[i] = byte(uv) | 0x80
									uv >>= 7
									i++
								}
								buf[i] = byte(uv)
								i++
							}
						}
						for ke, vl := range vl {
							{
								si := ke.Marshal(buf[i:])
								i += si
							}
							{
								for _, item := range vl {
									{
										length := len(item)
										{
											uv := uint64(length)
											if length < 0 {
												uv = ^(uv << 1)
											} else {
												uv = uv << 1
											}
											{
												for uv >= 0x80 {
													buf[i] = byte(uv) | 0x80
													uv >>= 7
													i++
												}
												buf[i] = byte(uv)
												i++
											}
										}
										if len(buf[i:]) < length {
											panic(errs.ErrSmallBuf)
										}
										i += copy(buf[i:], item)
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *StructType) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 9 && b > 1 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				v.Uint = v.Uint | uint(b)<<shift
				done = true
				i += l + 1
				break
			}
			v.Uint = v.Uint | uint(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Uint", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 2 && b > 3 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				v.Uint16 = v.Uint16 | uint16(b)<<shift
				done = true
				i += l + 1
				break
			}
			v.Uint16 = v.Uint16 | uint16(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Uint16", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 4 && b > 15 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				v.Uint32 = v.Uint32 | uint32(b)<<shift
				done = true
				i += l + 1
				break
			}
			v.Uint32 = v.Uint32 | uint32(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Uint32", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 9 && b > 1 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				v.Uint64 = v.Uint64 | uint64(b)<<shift
				done = true
				i += l + 1
				break
			}
			v.Uint64 = v.Uint64 | uint64(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Uint64", err)
	}
	v.UintPtr = new(uint)
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 9 && b > 1 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				(*v.UintPtr) = (*v.UintPtr) | uint(b)<<shift
				done = true
				i += l + 1
				break
			}
			(*v.UintPtr) = (*v.UintPtr) | uint(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("UintPtr", err)
	}
	{
		tmp0 := new(uint)
		tmp1 := &tmp0
		v.UintPtrPtrPtr = &tmp1
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 9 && b > 1 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				(***v.UintPtrPtrPtr) = (***v.UintPtrPtrPtr) | uint(b)<<shift
				done = true
				i += l + 1
				break
			}
			(***v.UintPtrPtrPtr) = (***v.UintPtrPtrPtr) | uint(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("UintPtrPtrPtr", err)
	}
	{
		var uv uint64
		{
			if i > len(buf)-1 {
				return i, errs.ErrSmallBuf
			}
			shift := 0
			done := false
			for l, b := range buf[i:] {
				if l == 9 && b > 1 {
					return i, errs.ErrOverflow
				}
				if b < 0x80 {
					uv = uv | uint64(b)<<shift
					done = true
					i += l + 1
					break
				}
				uv = uv | uint64(b&0x7F)<<shift
				shift += 7
			}
			if !done {
				return i, errs.ErrSmallBuf
			}
		}
		if uv&1 == 1 {
			uv = ^(uv >> 1)
		} else {
			uv = uv >> 1
		}
		v.Int = int(uv)
	}
	if err != nil {
		return i, errs.NewFieldError("Int", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		v.Int8 = int8(buf[i])
		i++
	}
	if err != nil {
		return i, errs.NewFieldError("Int8", err)
	}
	{
		var uv uint16
		{
			if i > len(buf)-1 {
				return i, errs.ErrSmallBuf
			}
			shift := 0
			done := false
			for l, b := range buf[i:] {
				if l == 2 && b > 3 {
					return i, errs.ErrOverflow
				}
				if b < 0x80 {
					uv = uv | uint16(b)<<shift
					done = true
					i += l + 1
					break
				}
				uv = uv | uint16(b&0x7F)<<shift
				shift += 7
			}
			if !done {
				return i, errs.ErrSmallBuf
			}
		}
		if uv&1 == 1 {
			uv = ^(uv >> 1)
		} else {
			uv = uv >> 1
		}
		v.Int16 = int16(uv)
	}
	if err != nil {
		return i, errs.NewFieldError("Int16", err)
	}
	{
		var uv uint32
		{
			if i > len(buf)-1 {
				return i, errs.ErrSmallBuf
			}
			shift := 0
			done := false
			for l, b := range buf[i:] {
				if l == 4 && b > 15 {
					return i, errs.ErrOverflow
				}
				if b < 0x80 {
					uv = uv | uint32(b)<<shift
					done = true
					i += l + 1
					break
				}
				uv = uv | uint32(b&0x7F)<<shift
				shift += 7
			}
			if !done {
				return i, errs.ErrSmallBuf
			}
		}
		if uv&1 == 1 {
			uv = ^(uv >> 1)
		} else {
			uv = uv >> 1
		}
		v.Int32 = int32(uv)
	}
	if err != nil {
		return i, errs.NewFieldError("Int32", err)
	}
	{
		var uv uint64
		{
			if i > len(buf)-1 {
				return i, errs.ErrSmallBuf
			}
			shift := 0
			done := false
			for l, b := range buf[i:] {
				if l == 9 && b > 1 {
					return i, errs.ErrOverflow
				}
				if b < 0x80 {
					uv = uv | uint64(b)<<shift
					done = true
					i += l + 1
					break
				}
				uv = uv | uint64(b&0x7F)<<shift
				shift += 7
			}
			if !done {
				return i, errs.ErrSmallBuf
			}
		}
		if uv&1 == 1 {
			uv = ^(uv >> 1)
		} else {
			uv = uv >> 1
		}
		v.Int64 = int64(uv)
	}
	if err != nil {
		return i, errs.NewFieldError("Int64", err)
	}
	v.IntPtr = new(int)
	{
		var uv uint64
		{
			if i > len(buf)-1 {
				return i, errs.ErrSmallBuf
			}
			shift := 0
			done := false
			for l, b := range buf[i:] {
				if l == 9 && b > 1 {
					return i, errs.ErrOverflow
				}
				if b < 0x80 {
					uv = uv | uint64(b)<<shift
					done = true
					i += l + 1
					break
				}
				uv = uv | uint64(b&0x7F)<<shift
				shift += 7
			}
			if !done {
				return i, errs.ErrSmallBuf
			}
		}
		if uv&1 == 1 {
			uv = ^(uv >> 1)
		} else {
			uv = uv >> 1
		}
		(*v.IntPtr) = int(uv)
	}
	if err != nil {
		return i, errs.NewFieldError("IntPtr", err)
	}
	{
		tmp0 := new(int)
		tmp1 := &tmp0
		v.IntPtrPtrPtr = &tmp1
	}
	{
		var uv uint64
		{
			if i > len(buf)-1 {
				return i, errs.ErrSmallBuf
			}
			shift := 0
			done := false
			for l, b := range buf[i:] {
				if l == 9 && b > 1 {
					return i, errs.ErrOverflow
				}
				if b < 0x80 {
					uv = uv | uint64(b)<<shift
					done = true
					i += l + 1
					break
				}
				uv = uv | uint64(b&0x7F)<<shift
				shift += 7
			}
			if !done {
				return i, errs.ErrSmallBuf
			}
		}
		if uv&1 == 1 {
			uv = ^(uv >> 1)
		} else {
			uv = uv >> 1
		}
		(***v.IntPtrPtrPtr) = int(uv)
	}
	if err != nil {
		return i, errs.NewFieldError("IntPtrPtrPtr", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if len(buf) < i+length {
			return i, errs.ErrSmallBuf
		}
		v.String = string(buf[i : i+length])
		i += length
	}
	if err != nil {
		return i, errs.NewFieldError("String", err)
	}
	v.StringPtr = new(string)
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if len(buf) < i+length {
			return i, errs.ErrSmallBuf
		}
		(*v.StringPtr) = string(buf[i : i+length])
		i += length
	}
	if err != nil {
		return i, errs.NewFieldError("StringPtr", err)
	}
	{
		tmp0 := new(string)
		tmp1 := &tmp0
		v.StringPtrPtrPtr = &tmp1
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if len(buf) < i+length {
			return i, errs.ErrSmallBuf
		}
		(***v.StringPtrPtrPtr) = string(buf[i : i+length])
		i += length
	}
	if err != nil {
		return i, errs.NewFieldError("StringPtrPtrPtr", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		v.Byte = uint8(buf[i])
		i++
	}
	if err != nil {
		return i, errs.NewFieldError("Byte", err)
	}
	v.BytePtr = new(uint8)
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		(*v.BytePtr) = uint8(buf[i])
		i++
	}
	if err != nil {
		return i, errs.NewFieldError("BytePtr", err)
	}
	{
		tmp0 := new(uint8)
		tmp1 := &tmp0
		v.BytePtrPtrPtr = &tmp1
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		(***v.BytePtrPtrPtr) = uint8(buf[i])
		i++
	}
	if err != nil {
		return i, errs.NewFieldError("BytePtrPtrPtr", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		if buf[i] == 0x01 {
			v.Bool = true
			i++
		} else if buf[i] == 0x00 {
			v.Bool = false
			i++
		} else {
			err = errs.ErrWrongByte
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Bool", err)
	}
	v.BoolPtr = new(bool)
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		if buf[i] == 0x01 {
			(*v.BoolPtr) = true
			i++
		} else if buf[i] == 0x00 {
			(*v.BoolPtr) = false
			i++
		} else {
			err = errs.ErrWrongByte
		}
	}
	if err != nil {
		return i, errs.NewFieldError("BoolPtr", err)
	}
	{
		tmp0 := new(bool)
		tmp1 := &tmp0
		v.BoolPtrPtrPtr = &tmp1
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		if buf[i] == 0x01 {
			(***v.BoolPtrPtrPtr) = true
			i++
		} else if buf[i] == 0x00 {
			(***v.BoolPtrPtrPtr) = false
			i++
		} else {
			err = errs.ErrWrongByte
		}
	}
	if err != nil {
		return i, errs.NewFieldError("BoolPtrPtrPtr", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		v.Slice = make([]uint, length)
		for j := 0; j < length; j++ {
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						v.Slice[j] = v.Slice[j] | uint(b)<<shift
						done = true
						i += l + 1
						break
					}
					v.Slice[j] = v.Slice[j] | uint(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if err != nil {
				err = errs.NewSliceError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Slice", err)
	}
	v.SlicePtr = new([]uint16)
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		(*v.SlicePtr) = make([]uint16, length)
		for j := 0; j < length; j++ {
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 2 && b > 3 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						(*v.SlicePtr)[j] = (*v.SlicePtr)[j] | uint16(b)<<shift
						done = true
						i += l + 1
						break
					}
					(*v.SlicePtr)[j] = (*v.SlicePtr)[j] | uint16(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if err != nil {
				err = errs.NewSliceError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("SlicePtr", err)
	}
	{
		tmp0 := new([]uint16)
		tmp1 := &tmp0
		v.SlicePtrPtrPtr = &tmp1
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		(***v.SlicePtrPtrPtr) = make([]uint16, length)
		for j := 0; j < length; j++ {
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 2 && b > 3 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						(***v.SlicePtrPtrPtr)[j] = (***v.SlicePtrPtrPtr)[j] | uint16(b)<<shift
						done = true
						i += l + 1
						break
					}
					(***v.SlicePtrPtrPtr)[j] = (***v.SlicePtrPtrPtr)[j] | uint16(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if err != nil {
				err = errs.NewSliceError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("SlicePtrPtrPtr", err)
	}
	{
		for j := 0; j < 2; j++ {
			{
				var uv uint64
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 9 && b > 1 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint64(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint64(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				v.Array[j] = int(uv)
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Array", err)
	}
	v.ArrayPtr = new([2]int32)
	{
		for j := 0; j < 2; j++ {
			{
				var uv uint32
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 4 && b > 15 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint32(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint32(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				(*v.ArrayPtr)[j] = int32(uv)
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("ArrayPtr", err)
	}
	{
		tmp0 := new([2]int32)
		tmp1 := &tmp0
		v.ArrayPtrPtrPtr = &tmp1
	}
	{
		for j := 0; j < 2; j++ {
			{
				var uv uint32
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 4 && b > 15 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint32(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint32(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				(***v.ArrayPtrPtrPtr)[j] = int32(uv)
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("ArrayPtrPtrPtr", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		v.Map = make(map[string]int)
		for ; length > 0; length-- {
			var kem string
			var vlm int
			{
				var length int
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					length = int(uv)
				}
				if length < 0 {
					return i, errs.ErrNegativeLength
				}
				if len(buf) < i+length {
					return i, errs.ErrSmallBuf
				}
				kem = string(buf[i : i+length])
				i += length
			}
			if err != nil {
				err = errs.NewMapKeyError(kem, err)
				break
			}
			{
				var uv uint64
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 9 && b > 1 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint64(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint64(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				vlm = int(uv)
			}
			if err != nil {
				err = errs.NewMapValueError(kem, vlm, err)
				break
			}
			(v.Map)[kem] = vlm
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Map", err)
	}
	v.MapPtr = new(map[string]int)
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		(*v.MapPtr) = make(map[string]int)
		for ; length > 0; length-- {
			var kem string
			var vlm int
			{
				var length int
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					length = int(uv)
				}
				if length < 0 {
					return i, errs.ErrNegativeLength
				}
				if len(buf) < i+length {
					return i, errs.ErrSmallBuf
				}
				kem = string(buf[i : i+length])
				i += length
			}
			if err != nil {
				err = errs.NewMapKeyError(kem, err)
				break
			}
			{
				var uv uint64
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 9 && b > 1 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint64(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint64(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				vlm = int(uv)
			}
			if err != nil {
				err = errs.NewMapValueError(kem, vlm, err)
				break
			}
			(*v.MapPtr)[kem] = vlm
		}
	}
	if err != nil {
		return i, errs.NewFieldError("MapPtr", err)
	}
	{
		tmp0 := new(map[string]int)
		tmp1 := &tmp0
		v.MapPtrPtrPtr = &tmp1
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		(***v.MapPtrPtrPtr) = make(map[string]int)
		for ; length > 0; length-- {
			var kem string
			var vlm int
			{
				var length int
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					length = int(uv)
				}
				if length < 0 {
					return i, errs.ErrNegativeLength
				}
				if len(buf) < i+length {
					return i, errs.ErrSmallBuf
				}
				kem = string(buf[i : i+length])
				i += length
			}
			if err != nil {
				err = errs.NewMapKeyError(kem, err)
				break
			}
			{
				var uv uint64
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 9 && b > 1 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint64(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint64(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				vlm = int(uv)
			}
			if err != nil {
				err = errs.NewMapValueError(kem, vlm, err)
				break
			}
			(***v.MapPtrPtrPtr)[kem] = vlm
		}
	}
	if err != nil {
		return i, errs.NewFieldError("MapPtrPtrPtr", err)
	}
	{
		var sv SimpleStructType
		si := 0
		si, err = sv.Unmarshal(buf[i:])
		if err == nil {
			v.Struct = sv
			i += si
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Struct", err)
	}
	v.StructPtr = new(SimpleStructType)
	{
		var sv SimpleStructType
		si := 0
		si, err = sv.Unmarshal(buf[i:])
		if err == nil {
			(*v.StructPtr) = sv
			i += si
		}
	}
	if err != nil {
		return i, errs.NewFieldError("StructPtr", err)
	}
	{
		tmp0 := new(SimpleStructType)
		tmp1 := &tmp0
		v.StructPtrPtrPtr = &tmp1
	}
	{
		var sv SimpleStructType
		si := 0
		si, err = sv.Unmarshal(buf[i:])
		if err == nil {
			(***v.StructPtrPtrPtr) = sv
			i += si
		}
	}
	if err != nil {
		return i, errs.NewFieldError("StructPtrPtrPtr", err)
	}
	{
		for j := 0; j < 2; j++ {
			{
				var length int
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					length = int(uv)
				}
				if length < 0 {
					return i, errs.ErrNegativeLength
				}
				v.Tricky[j] = make(map[[2]IntAlias]map[StringAlias][2]string)
				for ; length > 0; length-- {
					var kem [2]IntAlias
					var vlm map[StringAlias][2]string
					{
						for j := 0; j < 2; j++ {
							{
								var sv IntAlias
								si := 0
								si, err = sv.Unmarshal(buf[i:])
								if err == nil {
									kem[j] = sv
									i += si
								}
							}
							if err != nil {
								err = errs.NewArrayError(j, err)
								break
							}
						}
					}
					if err != nil {
						err = errs.NewMapKeyError(kem, err)
						break
					}
					{
						var length int
						{
							var uv uint64
							{
								if i > len(buf)-1 {
									return i, errs.ErrSmallBuf
								}
								shift := 0
								done := false
								for l, b := range buf[i:] {
									if l == 9 && b > 1 {
										return i, errs.ErrOverflow
									}
									if b < 0x80 {
										uv = uv | uint64(b)<<shift
										done = true
										i += l + 1
										break
									}
									uv = uv | uint64(b&0x7F)<<shift
									shift += 7
								}
								if !done {
									return i, errs.ErrSmallBuf
								}
							}
							if uv&1 == 1 {
								uv = ^(uv >> 1)
							} else {
								uv = uv >> 1
							}
							length = int(uv)
						}
						if length < 0 {
							return i, errs.ErrNegativeLength
						}
						vlm = make(map[StringAlias][2]string)
						for ; length > 0; length-- {
							var kemm StringAlias
							var vlmm [2]string
							{
								var sv StringAlias
								si := 0
								si, err = sv.Unmarshal(buf[i:])
								if err == nil {
									kemm = sv
									i += si
								}
							}
							if err != nil {
								err = errs.NewMapKeyError(kemm, err)
								break
							}
							{
								for j := 0; j < 2; j++ {
									{
										var length int
										{
											var uv uint64
											{
												if i > len(buf)-1 {
													return i, errs.ErrSmallBuf
												}
												shift := 0
												done := false
												for l, b := range buf[i:] {
													if l == 9 && b > 1 {
														return i, errs.ErrOverflow
													}
													if b < 0x80 {
														uv = uv | uint64(b)<<shift
														done = true
														i += l + 1
														break
													}
													uv = uv | uint64(b&0x7F)<<shift
													shift += 7
												}
												if !done {
													return i, errs.ErrSmallBuf
												}
											}
											if uv&1 == 1 {
												uv = ^(uv >> 1)
											} else {
												uv = uv >> 1
											}
											length = int(uv)
										}
										if length < 0 {
											return i, errs.ErrNegativeLength
										}
										if len(buf) < i+length {
											return i, errs.ErrSmallBuf
										}
										vlmm[j] = string(buf[i : i+length])
										i += length
									}
									if err != nil {
										err = errs.NewArrayError(j, err)
										break
									}
								}
							}
							if err != nil {
								err = errs.NewMapValueError(kemm, vlmm, err)
								break
							}
							(vlm)[kemm] = vlmm
						}
					}
					if err != nil {
						err = errs.NewMapValueError(kem, vlm, err)
						break
					}
					(v.Tricky[j])[kem] = vlm
				}
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Tricky", err)
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v StructType) Size() int {
	size := 0
	{
		for v.Uint >= 0x80 {
			v.Uint >>= 7
			size++
		}
		size++
	}
	{
		for v.Uint16 >= 0x80 {
			v.Uint16 >>= 7
			size++
		}
		size++
	}
	{
		for v.Uint32 >= 0x80 {
			v.Uint32 >>= 7
			size++
		}
		size++
	}
	{
		for v.Uint64 >= 0x80 {
			v.Uint64 >>= 7
			size++
		}
		size++
	}
	{
		tmp := (*v.UintPtr)
		for tmp >= 0x80 {
			tmp >>= 7
			size++
		}
		size++
	}
	{
		tmp := (***v.UintPtrPtrPtr)
		for tmp >= 0x80 {
			tmp >>= 7
			size++
		}
		size++
	}
	{
		uv := uint64(v.Int<<1) ^ uint64(v.Int>>63)
		{
			for uv >= 0x80 {
				uv >>= 7
				size++
			}
			size++
		}
	}
	{
		_ = v.Int8
		size++
	}
	{
		uv := uint16(v.Int16<<1) ^ uint16(v.Int16>>15)
		{
			for uv >= 0x80 {
				uv >>= 7
				size++
			}
			size++
		}
	}
	{
		uv := uint32(v.Int32<<1) ^ uint32(v.Int32>>31)
		{
			for uv >= 0x80 {
				uv >>= 7
				size++
			}
			size++
		}
	}
	{
		uv := uint64(v.Int64<<1) ^ uint64(v.Int64>>63)
		{
			for uv >= 0x80 {
				uv >>= 7
				size++
			}
			size++
		}
	}
	{
		uv := uint64((*v.IntPtr)<<1) ^ uint64((*v.IntPtr)>>63)
		{
			for uv >= 0x80 {
				uv >>= 7
				size++
			}
			size++
		}
	}
	{
		uv := uint64((***v.IntPtrPtrPtr)<<1) ^ uint64((***v.IntPtrPtrPtr)>>63)
		{
			for uv >= 0x80 {
				uv >>= 7
				size++
			}
			size++
		}
	}
	{
		length := len(v.String)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		size += len(v.String)
	}
	{
		length := len((*v.StringPtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		size += len((*v.StringPtr))
	}
	{
		length := len((***v.StringPtrPtrPtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		size += len((***v.StringPtrPtrPtr))
	}
	{
		_ = v.Byte
		size++
	}
	{
		_ = v.BytePtr
		size++
	}
	{
		_ = v.BytePtrPtrPtr
		size++
	}
	{
		_ = v.Bool
		size++
	}
	{
		_ = v.BoolPtr
		size++
	}
	{
		_ = v.BoolPtrPtrPtr
		size++
	}
	{
		length := len(v.Slice)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for _, el := range v.Slice {
			{
				for el >= 0x80 {
					el >>= 7
					size++
				}
				size++
			}
		}
	}
	{
		length := len((*v.SlicePtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for _, el := range *v.SlicePtr {
			{
				for el >= 0x80 {
					el >>= 7
					size++
				}
				size++
			}
		}
	}
	{
		length := len((***v.SlicePtrPtrPtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for _, el := range ***v.SlicePtrPtrPtr {
			{
				for el >= 0x80 {
					el >>= 7
					size++
				}
				size++
			}
		}
	}
	{
		for _, item := range v.Array {
			{
				uv := uint64(item<<1) ^ uint64(item>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		for _, item := range *v.ArrayPtr {
			{
				uv := uint32(item<<1) ^ uint32(item>>31)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		for _, item := range ***v.ArrayPtrPtrPtr {
			{
				uv := uint32(item<<1) ^ uint32(item>>31)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		length := len(v.Map)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range v.Map {
			{
				length := len(ke)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				size += len(ke)
			}
			{
				uv := uint64(vl<<1) ^ uint64(vl>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		length := len((*v.MapPtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range *v.MapPtr {
			{
				length := len(ke)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				size += len(ke)
			}
			{
				uv := uint64(vl<<1) ^ uint64(vl>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		length := len((***v.MapPtrPtrPtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range ***v.MapPtrPtrPtr {
			{
				length := len(ke)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				size += len(ke)
			}
			{
				uv := uint64(vl<<1) ^ uint64(vl>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		ss := v.Struct.Size()
		size += ss
	}
	{
		ss := (*v.StructPtr).Size()
		size += ss
	}
	{
		ss := (***v.StructPtrPtrPtr).Size()
		size += ss
	}
	{
		for _, item := range v.Tricky {
			{
				length := len(item)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				for ke, vl := range item {
					{
						for _, item := range ke {
							{
								ss := item.Size()
								size += ss
							}
						}
					}
					{
						length := len(vl)
						{
							uv := uint64(length<<1) ^ uint64(length>>63)
							{
								for uv >= 0x80 {
									uv >>= 7
									size++
								}
								size++
							}
						}
						for ke, vl := range vl {
							{
								ss := ke.Size()
								size += ss
							}
							{
								for _, item := range vl {
									{
										length := len(item)
										{
											uv := uint64(length<<1) ^ uint64(length>>63)
											{
												for uv >= 0x80 {
													uv >>= 7
													size++
												}
												size++
											}
										}
										size += len(item)
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return size
}
