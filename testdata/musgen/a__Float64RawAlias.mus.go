// Code generated by musgen. DO NOT EDIT.

package musgen

import (
	"math"

	"github.com/ymz-ncnk/musgo/errs"
)

// Marshal fills buf with the MUS encoding of v.
func (v Float64RawAlias) Marshal(buf []byte) int {
	i := 0
	{
		uv := math.Float64bits(float64(v))
		{
			buf[i] = byte(uv)
			i++
			buf[i] = byte(uv >> 8)
			i++
			buf[i] = byte(uv >> 16)
			i++
			buf[i] = byte(uv >> 24)
			i++
			buf[i] = byte(uv >> 32)
			i++
			buf[i] = byte(uv >> 40)
			i++
			buf[i] = byte(uv >> 48)
			i++
			buf[i] = byte(uv >> 56)
			i++
		}
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *Float64RawAlias) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var uv uint64
		{
			if len(buf) < 8 {
				return i, errs.ErrSmallBuf
			}
			uv = uint64(buf[i])
			i++
			uv |= uint64(buf[i]) << 8
			i++
			uv |= uint64(buf[i]) << 16
			i++
			uv |= uint64(buf[i]) << 24
			i++
			uv |= uint64(buf[i]) << 32
			i++
			uv |= uint64(buf[i]) << 40
			i++
			uv |= uint64(buf[i]) << 48
			i++
			uv |= uint64(buf[i]) << 56
			i++
		}
		(*v) = Float64RawAlias(math.Float64frombits(uv))
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v Float64RawAlias) Size() int {
	size := 0
	{
		{
			_ = v
			size += 8
		}
	}
	return size
}
