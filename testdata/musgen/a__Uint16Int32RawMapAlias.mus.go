// Code generated by musgen. DO NOT EDIT.

package musgen

import "github.com/ymz-ncnk/muserrs"

// Marshal fills buf with the MUS encoding of v.
func (v Uint16Int32RawMapAlias) Marshal(buf []byte) int {
	i := 0
	{
		length := len(v)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range v {
			{
				buf[i] = byte(ke)
				i++
				buf[i] = byte(ke >> 8)
				i++
			}
			{
				{
					buf[i] = byte(vl)
					i++
					buf[i] = byte(vl >> 8)
					i++
					buf[i] = byte(vl >> 16)
					i++
					buf[i] = byte(vl >> 24)
					i++
				}
			}
		}
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *Uint16Int32RawMapAlias) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, muserrs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, muserrs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, muserrs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, muserrs.ErrNegativeLength
		}
		(*v) = make(map[uint16]int32)
		for ; length > 0; length-- {
			var kem uint16
			var vlm int32
			{
				if len(buf) < 2 {
					return i, muserrs.ErrSmallBuf
				}
				kem = uint16(buf[i])
				i++
				kem |= uint16(buf[i]) << 8
				i++
			}
			if err != nil {
				err = muserrs.NewMapKeyError(kem, err)
				break
			}
			{
				{
					if len(buf) < 4 {
						return i, muserrs.ErrSmallBuf
					}
					vlm = int32(buf[i])
					i++
					vlm |= int32(buf[i]) << 8
					i++
					vlm |= int32(buf[i]) << 16
					i++
					vlm |= int32(buf[i]) << 24
					i++
				}
			}
			if err != nil {
				err = muserrs.NewMapValueError(kem, vlm, err)
				break
			}
			(*v)[kem] = vlm
		}
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v Uint16Int32RawMapAlias) Size() int {
	size := 0
	{
		length := len(v)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range v {
			{
				_ = ke
				size += 2
			}
			{
				{
					_ = vl
					size += 4
				}
			}
		}
	}
	return size
}
