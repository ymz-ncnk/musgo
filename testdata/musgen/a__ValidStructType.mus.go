// Code generated by musgen. DO NOT EDIT.

package musgen

import "github.com/ymz-ncnk/musgo/errs"

// Marshal fills buf with the MUS encoding of v.
func (v ValidStructType) Marshal(buf []byte) int {
	i := 0
	{
		for v.Uint64 >= 0x80 {
			buf[i] = byte(v.Uint64) | 0x80
			v.Uint64 >>= 7
			i++
		}
		buf[i] = byte(v.Uint64)
		i++
	}
	{
		buf[i] = byte(v.Int8)
		i++
	}
	{
		length := len(v.String)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		if len(buf[i:]) < length {
			panic(errs.ErrSmallBuf)
		}
		i += copy(buf[i:], v.String)
	}
	{
		buf[i] = byte(v.Byte)
		i++
	}
	{
		if v.Bool {
			buf[i] = 0x01
		} else {
			buf[i] = 0x00
		}
		i++
	}
	{
		length := len(v.Slice)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for _, el := range v.Slice {
			{
				for el >= 0x80 {
					buf[i] = byte(el) | 0x80
					el >>= 7
					i++
				}
				buf[i] = byte(el)
				i++
			}
		}
	}
	{
		length := len((*v.SlicePtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for _, el := range *v.SlicePtr {
			{
				for el >= 0x80 {
					buf[i] = byte(el) | 0x80
					el >>= 7
					i++
				}
				buf[i] = byte(el)
				i++
			}
		}
	}
	{
		for _, item := range v.Array {
			{
				uv := uint64(item)
				if item < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		for _, item := range *v.ArrayPtr {
			{
				uv := uint32(item)
				if item < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		length := len(v.Map)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range v.Map {
			{
				length := len(ke)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				if len(buf[i:]) < length {
					panic(errs.ErrSmallBuf)
				}
				i += copy(buf[i:], ke)
			}
			{
				uv := uint64(vl)
				if vl < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		length := len((*v.MapPtr))
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range *v.MapPtr {
			{
				length := len(ke)
				{
					uv := uint64(length)
					if length < 0 {
						uv = ^(uv << 1)
					} else {
						uv = uv << 1
					}
					{
						for uv >= 0x80 {
							buf[i] = byte(uv) | 0x80
							uv >>= 7
							i++
						}
						buf[i] = byte(uv)
						i++
					}
				}
				if len(buf[i:]) < length {
					panic(errs.ErrSmallBuf)
				}
				i += copy(buf[i:], ke)
			}
			{
				uv := uint64(vl)
				if vl < 0 {
					uv = ^(uv << 1)
				} else {
					uv = uv << 1
				}
				{
					for uv >= 0x80 {
						buf[i] = byte(uv) | 0x80
						uv >>= 7
						i++
					}
					buf[i] = byte(uv)
					i++
				}
			}
		}
	}
	{
		si := v.Struct.Marshal(buf[i:])
		i += si
	}
	{
		si := (*v.StructPtr).Marshal(buf[i:])
		i += si
	}
	return i
}

// Unmarshal parses the MUS-encoded buf, and sets the result to *v.
func (v *ValidStructType) Unmarshal(buf []byte) (int, error) {
	i := 0
	var err error
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 9 && b > 1 {
				return i, errs.ErrOverflow
			}
			if b < 0x80 {
				v.Uint64 = v.Uint64 | uint64(b)<<shift
				done = true
				i += l + 1
				err = BiggerThanTenUint64(v.Uint64)
				break
			}
			v.Uint64 = v.Uint64 | uint64(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, errs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Uint64", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		v.Int8 = int8(buf[i])
		i++
		err = BiggerThanTenInt8(v.Int8)
	}
	if err != nil {
		return i, errs.NewFieldError("Int8", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if len(buf) < i+length {
			return i, errs.ErrSmallBuf
		}
		if length > 10 {
			err = errs.ErrMaxLengthExceeded
		} else {
			v.String = string(buf[i : i+length])
			i += length
			err = NotEmptyString(v.String)
		}
	}
	if err != nil {
		return i, errs.NewFieldError("String", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		v.Byte = uint8(buf[i])
		i++
		err = BiggerThanTenByte(v.Byte)
	}
	if err != nil {
		return i, errs.NewFieldError("Byte", err)
	}
	{
		if i > len(buf)-1 {
			return i, errs.ErrSmallBuf
		}
		if buf[i] == 0x01 {
			v.Bool = true
			i++
			err = PositiveBool(v.Bool)
		} else if buf[i] == 0x00 {
			v.Bool = false
			i++
			err = PositiveBool(v.Bool)
		} else {
			err = errs.ErrWrongByte
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Bool", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if length > 8 {
			err = errs.ErrMaxLengthExceeded
		} else {
			v.Slice = make([]uint, length)
			for j := 0; j < length; j++ {
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 9 && b > 1 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							v.Slice[j] = v.Slice[j] | uint(b)<<shift
							done = true
							i += l + 1
							err = BiggerThanTenUint(v.Slice[j])
							break
						}
						v.Slice[j] = v.Slice[j] | uint(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if err != nil {
					err = errs.NewSliceError(j, err)
					break
				}
			}
			if err == nil {
				err = UintSliceSumBiggerThanTen(v.Slice)
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Slice", err)
	}
	v.SlicePtr = new([]uint16)
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		(*v.SlicePtr) = make([]uint16, length)
		for j := 0; j < length; j++ {
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 2 && b > 3 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						(*v.SlicePtr)[j] = (*v.SlicePtr)[j] | uint16(b)<<shift
						done = true
						i += l + 1
						err = BiggerThanTenUint16((*v.SlicePtr)[j])
						break
					}
					(*v.SlicePtr)[j] = (*v.SlicePtr)[j] | uint16(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if err != nil {
				err = errs.NewSliceError(j, err)
				break
			}
		}
		if err == nil {
			err = Uint16SlicePtrSumBiggerThanTen(v.SlicePtr)
		}
	}
	if err != nil {
		return i, errs.NewFieldError("SlicePtr", err)
	}
	{
		for j := 0; j < 2; j++ {
			{
				var uv uint64
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 9 && b > 1 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint64(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint64(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				v.Array[j] = int(uv)
				err = BiggerThanTenInt(v.Array[j])
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
		if err == nil {
			err = IntArraySumBiggerThanTen(v.Array)
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Array", err)
	}
	v.ArrayPtr = new([2]int32)
	{
		for j := 0; j < 2; j++ {
			{
				var uv uint32
				{
					if i > len(buf)-1 {
						return i, errs.ErrSmallBuf
					}
					shift := 0
					done := false
					for l, b := range buf[i:] {
						if l == 4 && b > 15 {
							return i, errs.ErrOverflow
						}
						if b < 0x80 {
							uv = uv | uint32(b)<<shift
							done = true
							i += l + 1
							break
						}
						uv = uv | uint32(b&0x7F)<<shift
						shift += 7
					}
					if !done {
						return i, errs.ErrSmallBuf
					}
				}
				if uv&1 == 1 {
					uv = ^(uv >> 1)
				} else {
					uv = uv >> 1
				}
				(*v.ArrayPtr)[j] = int32(uv)
				err = BiggerThanTenInt32((*v.ArrayPtr)[j])
			}
			if err != nil {
				err = errs.NewArrayError(j, err)
				break
			}
		}
		if err == nil {
			err = Int32ArrayPtrSumBiggerThanTen(v.ArrayPtr)
		}
	}
	if err != nil {
		return i, errs.NewFieldError("ArrayPtr", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if length > 5 {
			err = errs.ErrMaxLengthExceeded
		} else {
			v.Map = make(map[string]int)
			for ; length > 0; length-- {
				var kem string
				var vlm int
				{
					var length int
					{
						var uv uint64
						{
							if i > len(buf)-1 {
								return i, errs.ErrSmallBuf
							}
							shift := 0
							done := false
							for l, b := range buf[i:] {
								if l == 9 && b > 1 {
									return i, errs.ErrOverflow
								}
								if b < 0x80 {
									uv = uv | uint64(b)<<shift
									done = true
									i += l + 1
									break
								}
								uv = uv | uint64(b&0x7F)<<shift
								shift += 7
							}
							if !done {
								return i, errs.ErrSmallBuf
							}
						}
						if uv&1 == 1 {
							uv = ^(uv >> 1)
						} else {
							uv = uv >> 1
						}
						length = int(uv)
					}
					if length < 0 {
						return i, errs.ErrNegativeLength
					}
					if len(buf) < i+length {
						return i, errs.ErrSmallBuf
					}
					kem = string(buf[i : i+length])
					i += length
					err = StrIsHello(kem)
				}
				if err != nil {
					err = errs.NewMapKeyError(kem, err)
					break
				}
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					vlm = int(uv)
					err = BiggerThanTenInt(vlm)
				}
				if err != nil {
					err = errs.NewMapValueError(kem, vlm, err)
					break
				}
				(v.Map)[kem] = vlm
			}
			if err == nil {
				err = MapSumBiggerThanTen(v.Map)
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Map", err)
	}
	v.MapPtr = new(map[string]int)
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, errs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, errs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, errs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, errs.ErrNegativeLength
		}
		if length > 4 {
			err = errs.ErrMaxLengthExceeded
		} else {
			(*v.MapPtr) = make(map[string]int)
			for ; length > 0; length-- {
				var kem string
				var vlm int
				{
					var length int
					{
						var uv uint64
						{
							if i > len(buf)-1 {
								return i, errs.ErrSmallBuf
							}
							shift := 0
							done := false
							for l, b := range buf[i:] {
								if l == 9 && b > 1 {
									return i, errs.ErrOverflow
								}
								if b < 0x80 {
									uv = uv | uint64(b)<<shift
									done = true
									i += l + 1
									break
								}
								uv = uv | uint64(b&0x7F)<<shift
								shift += 7
							}
							if !done {
								return i, errs.ErrSmallBuf
							}
						}
						if uv&1 == 1 {
							uv = ^(uv >> 1)
						} else {
							uv = uv >> 1
						}
						length = int(uv)
					}
					if length < 0 {
						return i, errs.ErrNegativeLength
					}
					if len(buf) < i+length {
						return i, errs.ErrSmallBuf
					}
					kem = string(buf[i : i+length])
					i += length
					err = StrIsHello(kem)
				}
				if err != nil {
					err = errs.NewMapKeyError(kem, err)
					break
				}
				{
					var uv uint64
					{
						if i > len(buf)-1 {
							return i, errs.ErrSmallBuf
						}
						shift := 0
						done := false
						for l, b := range buf[i:] {
							if l == 9 && b > 1 {
								return i, errs.ErrOverflow
							}
							if b < 0x80 {
								uv = uv | uint64(b)<<shift
								done = true
								i += l + 1
								break
							}
							uv = uv | uint64(b&0x7F)<<shift
							shift += 7
						}
						if !done {
							return i, errs.ErrSmallBuf
						}
					}
					if uv&1 == 1 {
						uv = ^(uv >> 1)
					} else {
						uv = uv >> 1
					}
					vlm = int(uv)
					err = BiggerThanTenInt(vlm)
				}
				if err != nil {
					err = errs.NewMapValueError(kem, vlm, err)
					break
				}
				(*v.MapPtr)[kem] = vlm
			}
			if err == nil {
				err = MapPtrSumBiggerThanTen(v.MapPtr)
			}
		}
	}
	if err != nil {
		return i, errs.NewFieldError("MapPtr", err)
	}
	{
		var sv SimpleStructType
		si := 0
		si, err = sv.Unmarshal(buf[i:])
		if err == nil {
			v.Struct = sv
			i += si
			err = ValidSimpleStructType(v.Struct)
		}
	}
	if err != nil {
		return i, errs.NewFieldError("Struct", err)
	}
	v.StructPtr = new(SimpleStructType)
	{
		var sv SimpleStructType
		si := 0
		si, err = sv.Unmarshal(buf[i:])
		if err == nil {
			(*v.StructPtr) = sv
			i += si
			err = ValidSimpleStructPtrType(v.StructPtr)
		}
	}
	if err != nil {
		return i, errs.NewFieldError("StructPtr", err)
	}
	return i, err
}

// Size returns the size of the MUS-encoded v.
func (v ValidStructType) Size() int {
	size := 0
	{
		for v.Uint64 >= 0x80 {
			v.Uint64 >>= 7
			size++
		}
		size++
	}
	{
		_ = v.Int8
		size++
	}
	{
		length := len(v.String)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		size += len(v.String)
	}
	{
		_ = v.Byte
		size++
	}
	{
		_ = v.Bool
		size++
	}
	{
		length := len(v.Slice)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for _, el := range v.Slice {
			{
				for el >= 0x80 {
					el >>= 7
					size++
				}
				size++
			}
		}
	}
	{
		length := len((*v.SlicePtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for _, el := range *v.SlicePtr {
			{
				for el >= 0x80 {
					el >>= 7
					size++
				}
				size++
			}
		}
	}
	{
		for _, item := range v.Array {
			{
				uv := uint64(item<<1) ^ uint64(item>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		for _, item := range *v.ArrayPtr {
			{
				uv := uint32(item<<1) ^ uint32(item>>31)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		length := len(v.Map)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range v.Map {
			{
				length := len(ke)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				size += len(ke)
			}
			{
				uv := uint64(vl<<1) ^ uint64(vl>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		length := len((*v.MapPtr))
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range *v.MapPtr {
			{
				length := len(ke)
				{
					uv := uint64(length<<1) ^ uint64(length>>63)
					{
						for uv >= 0x80 {
							uv >>= 7
							size++
						}
						size++
					}
				}
				size += len(ke)
			}
			{
				uv := uint64(vl<<1) ^ uint64(vl>>63)
				{
					for uv >= 0x80 {
						uv >>= 7
						size++
					}
					size++
				}
			}
		}
	}
	{
		ss := v.Struct.Size()
		size += ss
	}
	{
		ss := (*v.StructPtr).Size()
		size += ss
	}
	return size
}
